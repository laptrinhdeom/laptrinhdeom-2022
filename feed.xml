<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Lập trình dễ òm</title>
    <link href="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/feed.xml" rel="self" />
    <link href="https://www.laptrinhdeom.xyz/laptrinhdeom-2022" />
    <updated>2022-03-01T23:29:19+07:00</updated>
    <author>
        <name>Lập trình dễ òm</name>
    </author>
    <id>https://www.laptrinhdeom.xyz/laptrinhdeom-2022</id>

    <entry>
        <title>Sự khác nhau giữa Var, Let và Const trong Javascript</title>
        <author>
            <name>Lập trình dễ òm</name>
        </author>
        <link href="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/su-khac-nhau-giua-var-let-va-const-trong-javascript/"/>
        <id>https://www.laptrinhdeom.xyz/laptrinhdeom-2022/su-khac-nhau-giua-var-let-va-const-trong-javascript/</id>
            <category term="Javascript cơ bản"/>

        <updated>2022-03-01T23:29:19+07:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/3/javascript-var-let-const.webp" alt="" />
                    var, let và const trong Javascript Cách khai báo, khởi tạo biến trong Javascript Khi lập trình chúng ta thường phải sử dụng các biến để lưu trữ giá trị, dữ liệu… Trong Javascript thì để khởi tạo, khai báo biến, chúng ta sẽ dùng var hoặc let hoặc const.
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/3/javascript-var-let-const.webp" alt="" />
                <h1 id="var-let-và-const-trong-javascript">var, let và const trong Javascript</h1>
<h2 id="cách-khai-báo-khởi-tạo-biến-trong-javascript">Cách khai báo, khởi tạo biến trong Javascript</h2>
<p>Khi lập trình chúng ta thường phải sử dụng các biến để lưu trữ giá trị, dữ liệu…</p>
<p>Trong Javascript thì để khởi tạo, khai báo biến, chúng ta sẽ dùng <strong>var</strong> hoặc <strong>let</strong> hoặc <strong>const</strong>.</p>
<p><strong>Ví dụ:</strong></p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào"</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">"Lập trình Dễ òm"</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">helloMessage</span> <span class="o">=</span> <span class="nx">hello</span> <span class="o">+</span> <span class="s2">" "</span> <span class="o">+</span> <span class="nx">name</span><span class="p">;</span>
<span class="c1">// Kết quả: 'Xin chào Lập trình Dễ òm'</span></code></pre>
</div>
<p>Khá dễ hiểu phải không, vậy sự khác nhau giữa chúng là gì và khi nào nên dùng <strong>var</strong>, <strong>let</strong> và <strong>const</strong>?</p>
<p><strong>let</strong> và <strong>const</strong> là 2 từ khóa mới được giới thiệu trong <code>ES6</code> vào năm 2015, trước đó thì khởi tạo biến chỉ có 1 cách duy nhất là sử dụng từ khóa <strong>var</strong>.</p>
<h2 id="var">👉 var</h2>
<h4 id="scope-của-var">Scope của var</h4>
<ul>
<li><strong>var</strong> có scope là <strong>global scope</strong> hoặc <strong>function scope</strong>.</li>
<li>Nếu khởi tạo biến với var ở <strong>ngoài</strong> function thì nó có scope là <strong>global scope</strong>.</li>
<li>Nếu khởi tạo biến với var ở <strong>trong</strong> function thì nó có scope là <strong>function scope</strong>.</li>
</ul>
<h4 id="khai-báo-lại-redeclared-và-thay-đổi-giá-trị">Khai báo lại (redeclared) và thay đổi giá trị</h4>
<ul>
<li>
<p><strong>var</strong> cho phép chúng ta <strong>khai báo lại</strong>(redeclared) biến với cùng tên, nhưng cùng hoặc khác giá trị mà không bị lỗi gì.</p>
<p><strong>Ví dụ:</strong></p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào"</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào bạn"</span><span class="p">;</span>
</code></pre>
<button class="copyCodeButton">Copy</button></div>
</li>
<li>
<p>var cũng cho phép chúng ta thay đổi giá trị bất cứ khi nào cần.</p>
<p><strong>Ví dụ:</strong></p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào"</span><span class="p">;</span>
<span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào bạn"</span><span class="p">;</span>
</code></pre>
<button class="copyCodeButton">Copy</button></div>
</li>
</ul>
<h4 id="hoisting-của-var">Hoisting của var?</h4>
<p><strong>Hoisting là gì?</strong> bạn hãy đọc thêm ở đây: <a class="link" href="https://www.laptrinhdeom.xyz/bai-viet/javascript/hoisting-trong-javascript-la-gi/">Hoisting trong Javascript</a></p>
<p><strong>Hoisting</strong> là cơ chế của Javascript sẽ chuyển các phần khai báo của biến và hàm lên top của phạm vi của biến và hàm đó.</p>
<p>Với <strong>var</strong> thì biến sẽ được hoisted với giá trị <strong>undefined</strong>.</p>
<h4 id="lưu-ý-với-var">Lưu ý với var</h4>
<p>Khi làm việc với <strong>var</strong>, bạn phải chú ý thật kỹ các lưu ý sau đây.</p>
<ul>
<li><strong>var</strong> không báo lỗi khi khai báo lại biến với cùng tên, nên rất khó phát hiện lỗi, có thể vô tình ghi đè giá trị của 1 biến nào đó phía trên mà chúng ta không biết. Điều này làm chúng ta mất nhiều khá thời gian để debug lỗi.</li>
<li>Gán giá trị cho biến <strong>var</strong> ở <strong>global scope</strong> thì biến đó sẽ trở thành <strong>thuộc tính</strong> của object <strong>window</strong>.</li>
</ul>
<hr>
<h2 id="var">👉 let</h2>
<h4 id="scope-của-let">Scope của let</h4>
<ul>
<li><strong>let</strong> là <strong>block scope</strong>.</li>
<li><strong>block</strong> nghĩa là code được viết trong cặp dấu <code>{}</code>, ví dụ function, if/else, switch - case, for/while… Nghĩa là biến được khởi tạo với <strong>let</strong> trong block thì sẽ không thể sử dụng ở ngoài block đó, <strong>var</strong> thì có thể được nhé.</li>
</ul>
<p><strong>Ví dụ:</strong></p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="p">{</span>
  <span class="kd">let</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào"</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// Biến hello sẽ KHÔNG thể được sử dụng ở đây</span></code></pre>
</div>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="p">{</span>
  <span class="kd">var</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào"</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// Biến hello sẽ CÓ thể được sử dụng ở đây</span></code></pre>
</div>
<h4 id="khai-báo-lạiredeclared-và-thay-đổi-giá-trị">Khai báo lại(redeclared) và thay đổi giá trị</h4>
<ul>
<li>
<p><strong>let</strong> KHÔNG cho phép khai báo lại(redeclared) biến với cùng tên với phía trên.</p>
</li>
<li>
<p>Khi bạn cố tình redeclared biến thì sẽ nhận được lỗi này: <code>error: Identifier 'variableName' has already been declared</code> <strong>Ví dụ:</strong></p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào"</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào bạn"</span><span class="p">;</span>
<span class="c1">// Kết quả: error: Identifier 'hello' has already been declared</span></code></pre>
</div>
</li>
<li>
<p>Redeclared biến khác scope thì KHÔNG bị lỗi nhé. <strong>Ví dụ:</strong></p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào"</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào bạn"</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hello</span><span class="p">);</span> <span class="c1">// "Xin chào bạn"
</span><span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hello</span><span class="p">);</span> <span class="c1">// "Xin chào"</span></code></pre>
</div>
</li>
<li>
<p><strong>let</strong> cũng giống <strong>var</strong>, let CHO phép chúng ta thay đổi giá trị bất cứ lúc nào. <strong>Ví dụ:</strong></p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào"</span><span class="p">;</span>
<span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào bạn"</span><span class="p">;</span></code></pre>
</div>
</li>
</ul>
<h4 id="hoisting-của-let">Hoisting của let?</h4>
<ul>
<li>Cũng giống như <strong>var</strong>, <strong>let</strong> cũng được <strong>hoisted</strong> lên top của scope, <strong>NHƯNG</strong> không khởi tạo giá trị <strong>undefined</strong> như <strong>var</strong>.</li>
<li>Nghĩa là bạn sẽ bị báo lỗi <code>Reference Error</code> khi sử dụng biến với let mà chưa khai báo ở phía trên.</li>
</ul>
<hr>
<h2 id="var">👉 const</h2>
<h4 id="scope-của-const">Scope của const</h4>
<p>Tương tự như <strong>let</strong>, <strong>const</strong> cũng có scope là <strong>block</strong>.</p>
<h4 id="khai-báo-lại-và-thay-đổi-giá-trị">Khai báo lại và thay đổi giá trị</h4>
<ul>
<li>
<p>const chỉ được khai báo và gán giá trị 1 lần duy nhất, giá trị của const là không thể thay đổi, nếu cố tình gán giá trị cho const, bạn sẽ nhận lỗi này: <code>error: Assignment to constant variable.</code></p>
</li>
<li>
<p>const cũng không cho phép redeclared biến, bạn sẽ nhận được lỗi này khi cố gắng redeclare: <code>error: Identifier 'variableName' has already been declared</code>.</p>
</li>
</ul>
<h4 id="hoisting-của-const">Hoisting của const?</h4>
<p><strong>const hoisting</strong> giống y chang <strong>let</strong>, nghĩa là bạn sẽ bị lỗi khi sử dụng biến trước khi khai báo nó.</p>
<h4 id="lưu-ý-với-const">Lưu ý với const</h4>
<ul>
<li>
<p>Giá trị của biến với const không thể thay đổi, nhưng bạn có thể thay đổi thuộc tính (properties) của object <strong>Ví dụ:</strong></p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">employee</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">firstName</span><span class="o">:</span> <span class="s2">"Lập trình"</span><span class="p">,</span>
  <span class="nx">lastName</span><span class="o">:</span> <span class="s2">"Dễ òm"</span><span class="p">,</span>
<span class="p">};</span>

<span class="nx">employee</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="s2">"Dễ òm phải không bạn"</span><span class="p">;</span> <span class="c1">// hợp lệ</span></code></pre>
</div>
</li>
<li>
<p>Có thể thêm/xóa/sửa các phần tử của 1 array với const <strong>Ví dụ:</strong></p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">employees</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">];</span>

<span class="nx">employees</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> <span class="c1">// [1,2,3,4,5]</span></code></pre>
</div>
</li>
</ul>
<hr>
<h2 id="var">👉 Tóm lượt sự khác nhau của var, let và const</h2>
<ul>
<li><strong>var</strong> là <strong>global scope</strong> hoặc <strong>function scope</strong>, <strong>let</strong> và <strong>const</strong> là <strong>block scope</strong>.</li>
<li><strong>var</strong> <code>có thể</code> redeclared biến và gán lại giá trị, <strong>let</strong> <code>không thể</code> redeclared biến nhưng <code>có thể</code> gán lại giá trị, trong khi <strong>const</strong> thì <code>không thể</code> redeclared biến và cũng <code>không thể</code> gán lại giá trị.</li>
<li>Cả 3 đều được <strong>hoisted</strong> lên top của scope. Nhưng <strong>var</strong> thì hoisted với giá trị <strong>undefined</strong>, trong khi đó <strong>let</strong> và <strong>const</strong> thì hoisted nhưng <strong>không có giá trị</strong>.</li>
<li><strong>var</strong> và <strong>let</strong> có thể khởi tạo và không cần gán giá trị ban đầu, sau đó có thể gán giá trị khác, nhưng <strong>const</strong> thì bắt buộc phải gán giá trị ban đầu, và <strong>const</strong> không thể gán lại giá trị.</li>
</ul>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Hoisting trong Javascript là gì?</title>
        <author>
            <name>Lập trình dễ òm</name>
        </author>
        <link href="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/hoisting-trong-javascript-la-gi/"/>
        <id>https://www.laptrinhdeom.xyz/laptrinhdeom-2022/hoisting-trong-javascript-la-gi/</id>
            <category term="Javascript cơ bản"/>

        <updated>2022-03-01T23:24:29+07:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/2/javascript-hoisting.webp" alt="" />
                    Hoisting trong Javascript là gì? Từ xưa giờ khi làm việc với javascript, thì chắc hẳn các bạn cũng nghe tới thuật ngữ Hoisting rồi đúng không. Vậy Hoisting là cái quái gì vậy? nó có ăn được không? nó giúp ích gì cho chúng ta? Mình sẽ giúp&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/2/javascript-hoisting.webp" alt="" />
                <h1 id="hoisting-trong-javascript-là-gì">Hoisting trong Javascript là gì?</h1>
<p>Từ xưa giờ khi làm việc với javascript, thì chắc hẳn các bạn cũng nghe tới thuật ngữ <code>Hoisting</code> rồi đúng không.</p>
<p>Vậy <code>Hoisting</code> là cái quái gì vậy? nó có ăn được không? nó giúp ích gì cho chúng ta?</p>
<p>Mình sẽ giúp các bạn hiểu rõ về nó để chúng ta có đủ kiến thức và sự tự tin khi làm việc với javascript hơn nhé :)</p>
<hr>
<h2 id="định-nghĩa">Định nghĩa:</h2>
<p>Hoisting nghe cao sang vậy thôi, chứ thật ra không có gì là cao siêu đâu nhé.</p>
<p><code>Hoisting</code> là cơ chế của Javascript sẽ chuyển các phần khai báo của biến và hàm lên top của phạm vi của biến và hàm đó.</p>
<p>Nói 1 cách khác là 1 biến có thể được sử dụng trước khi nó được khởi tạo.</p>
<h5 id="ví-dụ-1---variable">📝 Ví dụ 1 - variable:</h5>
<p>Định nghĩa chỉ có vậy, nó hơi khó hiểu, để mình thêm ví dụ để các bạn dễ hiểu hơn:</p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hello</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào"</span><span class="p">;</span></code></pre>
</div>
<p>Code trên được Javascript biên dịch như sau:</p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">hello</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hello</span><span class="p">);</span>
<span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào"</span><span class="p">;</span></code></pre>
</div>
<p>Cho nên kết quả của ví dụ trên là: <code>undefined</code>.</p>
<p>Các bạn có hình dung ra được không, Javascript sẽ tự động chuyển phần khai báo của biến <code>hello</code> lên đầu tiên của đoạn code, khởi tạo biến xong rồi mới thực hiện các logic khác bên dưới.</p>
<h5 id="ví-dụ-1---variable">📝 Ví dụ 2 - function:</h5>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="nx">sayHello</span><span class="p">();</span>

<span class="kd">function</span> <span class="nx">sayHello</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"Xin chào"</span><span class="p">);</span>
<span class="p">}</span></code></pre>
</div>
<p>Tương tự như biến, function cũng được Javascript hoisted lên trên cùng của phạm vi.</p>
<p>Kết quả: <code>Xin chào</code>.</p>
<p>Điều đó có nghĩa là bạn hoàn toàn có thể gọi 1 function ở dưới (trước khi viết hàm) để sử dụng mà không gặp lỗi.</p>
<p>Nó sẽ tiện lợi cho chúng ta khi cấu trúc code để dễ làm việc hơn, ví dụ xử lý logic ở trên, phía dưới sẽ là nơi chứa các hàm và biến.</p>
<h5 id="ví-dụ-1---variable">📝 Ví dụ 3:</h5>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="nx">sayHello</span><span class="p">();</span>

<span class="kd">function</span> <span class="nx">sayHello</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hello</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào"</span><span class="p">;</span>
<span class="p">}</span></code></pre>
</div>
<p>Kết quả: <code>undefined</code>.</p>
<hr>
<h4 id="lưu-ý">⚠️ Lưu ý:</h4>
<ul>
<li>Javascript chỉ hoist phần <strong>khai báo</strong> <code>biến</code> và <code>hàm</code> lên top của phạm vi (scoped), các phần logic khác như gán giá trị thì không được hoist.</li>
</ul>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Scope của biến trong javascript</title>
        <author>
            <name>Lập trình dễ òm</name>
        </author>
        <link href="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/scope-cua-bien-trong-javascript/"/>
        <id>https://www.laptrinhdeom.xyz/laptrinhdeom-2022/scope-cua-bien-trong-javascript/</id>
            <category term="Javascript cơ bản"/>

        <updated>2022-03-01T23:22:07+07:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/1/javascript-scope.jpeg" alt="" />
                    Scope (phạm vi) của biến trong Javascript như thế nào? Biến trong javascript luôn có phạm vi của nó, trong bài này mình sẽ giúp các bạn hiểu rõ về phạm vi (scope) của biến nhé. Về cơ bản, Javascript có 3 loại scope như sau: Trước khi&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/1/javascript-scope.jpeg" alt="" />
                <h1 id="scope-phạm-vi-của-biến-trong-javascript-như-thế-nào">Scope (phạm vi) của biến trong Javascript như thế nào?</h1>
<p>Biến trong javascript luôn có phạm vi của nó, trong bài này mình sẽ giúp các bạn hiểu rõ về phạm vi (scope) của biến nhé.</p>
<p>Về cơ bản, Javascript có 3 loại scope như sau:</p>
<ul>
<li>Block scope</li>
<li>Function scope</li>
<li>Global scope</li>
</ul>
<h2 id="chúng-ta-sẽ-đi-chi-tiết-về-từng-loại-scope-trên">Chúng ta sẽ đi chi tiết về từng loại scope trên.</h2>
<h2 id="block-scope">1. Block scope</h2>
<p>Trước khi ES6 ra đời, thì biến được định nghĩa với từ khóa var chỉ có 2 scopes là: Global scope và Function scope.</p>
<ul>
<li>
<p>ES6 đã giới thiệu 2 từ khóa mới là let và const, là Block scope.</p>
</li>
<li>
<p>Biến được khởi tạo với let và const trong cặp dấu {} sẽ không thể truy cập từ bên ngoài block này.</p>
</li>
</ul>
<p>Ví dụ:</p>
<pre><code class="language-javascript">{
  let hello = "Xin chào";
}
// Biến hello sẽ KHÔNG thể được sử dụng ở đây</code></pre>
<ul>
<li>Biến được khởi tạo với var thì không có Block scope</li>
</ul>
<p>Ví dụ:</p>
<div>
<pre><code class="language-javascript">{
  var hello = "Xin chào";
}
// Biến hello sẽ CÓ thể được sử dụng ở đây
</code></pre>
</div>
<hr>
<h2 id="function-scope">2. Function scope</h2>
<ul>
<li>Biến được khởi tạo ở trong function thì được gọi là Function scope, và KHÔNG thể sử dụng ở ngoài function.</li>
<li>Cả 3 var, let, const đều giống nhau về Function scope.</li>
<li>Các function khác nhau CÓ THỂ sử dụng chung tên biến.</li>
</ul>
<p>Ví dụ:</p>
<div>
<pre><code class="language-javascript">function sayHello() {
  var helloVar = "Xin chào Var";
  let helloLet = "Xin chào Let";
  const helloConst = "Xin chào Const";
}
</code></pre>
</div>
<hr>
<h2 id="global-scope">3. Global scope</h2>
<ul>
<li>Biến được khởi tạo bên ngoài function thì được gọi là Global scope.</li>
<li>Cả 3 var, let, const đều có thể là GLOBAL scope.</li>
<li>Biến Global thì có thể sử dụng được trong tất cả function/block.</li>
</ul>
<p>Ví dụ:</p>
<div>
<pre><code class="language-javascript">var helloVar = "Xin chào Var";
let helloLet = "Xin chào Let";
const helloConst = "Xin chào Const";

function sayHello() {
  console.log(helloVar);
  console.log(helloLet);
  console.log(helloConst);
}</code></pre>
</div>
<hr>
<h4 id="lưu-ý">🔅Lưu ý</h4>
<ul>
<li>Gán giá trị cho biến mà biến đó không được khởi tạo, thì biến sẽ tự động trở thành GLOBAL scope. Ví dụ:</li>
</ul>
<div>
<pre><code class="language-javascript">function sayHello() {
  hello = "Xin chào";
}</code></pre>
</div>
<ul>
<li>Biến được khởi tạo ở Global scope với var thì sẽ trở thành thuộc tính của window. Ví dụ:</li>
</ul>
<div>
<pre><code class="language-javascript">var hello = "Xin chào";
console.log(window.hello); // Xin chào</code></pre>
</div>
<h4 id="quan-trọng">❗Quan trọng</h4>
<p>Các bạn hãy nhớ các điều sau để không gặp phải tình trạng rối tung khi code và debug nhé, để tránh việc làm các bạn stress :)</p>
<ul>
<li>Đừng tạo biến GLOBAL bất chấp, bạn phải biết bạn đang tạo với mục đích gì.</li>
<li>Luôn ý thức được phạm vi của biến bạn đang khởi tạo sẽ ảnh hưởng như thế nào đến code của bạn.</li>
<li>code trong function/block của bạn có thể thay đổi giá trị của biến GLOBAL mà bạn không hề biết, hãy chắc chắn những gì bạn đang làm không ảnh hưởng đến toàn bộ website.</li>
</ul>
            ]]>
        </content>
    </entry>
</feed>
