<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Lập trình dễ òm</title>
    <link href="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/feed.xml" rel="self" />
    <link href="https://www.laptrinhdeom.xyz/laptrinhdeom-2022" />
    <updated>2022-03-04T18:52:04+07:00</updated>
    <author>
        <name>Lập trình dễ òm</name>
    </author>
    <id>https://www.laptrinhdeom.xyz/laptrinhdeom-2022</id>

    <entry>
        <title>[Phần 3] Vim IDE - Làm đẹp Vim với OneDark</title>
        <author>
            <name>Lập trình dễ òm</name>
        </author>
        <link href="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/phan-3-vim-ide-lam-dep-vim-voi-onedark/"/>
        <id>https://www.laptrinhdeom.xyz/laptrinhdeom-2022/phan-3-vim-ide-lam-dep-vim-voi-onedark/</id>
            <category term="IDE - Vim"/>

        <updated>2022-03-04T18:52:04+07:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/9/cover.png" alt="" />
                    Theme code highlight: [Onedark] Đây là theme code highlight mà mình thấy khá đẹp và thích sử dụng nhất, nó giống với theme trên Atom, nó trông thế này: Thêm dòng này vào file ~/.vimrc vim ~/.vimrc call plug#begin() ... Plug https://github.com/joshdick/onedark.vim call plug#end() ... syntax on&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/9/cover.png" alt="" />
                <h3 id="theme-code-highlight-onedarkhttpsgithubcomjoshdickonedarkvim">Theme code highlight: <code>[<a href="https://github.com/joshdick/onedark.vim" target="_blank" rel="nofollow noopener noreferrer">Onedark</a>]</code></h3>
<p>Đây là theme code highlight mà mình thấy khá đẹp và thích sử dụng nhất, nó giống với theme trên Atom, nó trông thế này:</p>
<div class="gallery-wrapper"><div class="gallery" data-columns="1" data-is-empty="false">
<figure class="gallery__item"><a href="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/9/gallery/onedark.png" data-size="1574x1516"><img loading="lazy" src="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/9/gallery/onedark-thumbnail.png" alt="" width="768" height="740"></a></figure>
</div></div>
<h3 id="cài-đặt-theme-onedark">Cài đặt theme <code>Onedark</code>:</h3>
<p>Thêm dòng này vào file <code>~/.vimrc</code></p>
<p><code>vim ~/.vimrc</code></p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-makefile" data-lang="makefile"><span class="err">call</span> <span class="err">plug</span><span class="c">#begin()
</span><span class="err">...</span>
<span class="nf">Plug https</span><span class="o">:</span>//<span class="n">github</span>.<span class="n">com</span>/<span class="n">joshdick</span>/<span class="n">onedark</span>.<span class="n">vim</span>
<span class="err">call</span> <span class="err">plug</span><span class="c">#end()
</span><span class="err">...</span>
<span class="err">syntax</span> <span class="err">on</span>
<span class="err">colorscheme</span> <span class="err">onedark</span>
<span class="err">...</span></code></pre>
Sau đó lưu lại và chạy lệnh này trên terminal, không cần thoát vim nha:</div>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-makefile" data-lang="makefile"><span class="err">:source</span> <span class="err">~/.vimrc</span>
<span class="err">:PlugInstall</span></code></pre>
Tận hưởng giao diện thôi nào 😋</div>
<p>Phần tiếp theo chúng ta sẽ cài đặt giao diện cho phần footer giống thế này:</p>
<p><a href="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/9/gallery/vim-airline.png" data-size="2348x50" style="font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);"><img loading="lazy" src="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/9/gallery/vim-airline-thumbnail.png" alt="" width="768" height="16"></a></p>
<p> </p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>[Phần 2] Vim IDE - Cài đặt Vim-Plug</title>
        <author>
            <name>Lập trình dễ òm</name>
        </author>
        <link href="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/phan-2-vim-ide-cai-dat-vim-plug/"/>
        <id>https://www.laptrinhdeom.xyz/laptrinhdeom-2022/phan-2-vim-ide-cai-dat-vim-plug/</id>
            <category term="IDE - Vim"/>

        <updated>2022-03-04T18:28:10+07:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/8/vim-plug.png" alt="" />
                    Cài đặt Vim để code giống IDE Vim-Plug Vim có rất nhiều Package Manager như: Nhưng Vim Plug có vẻ được rất nhiều người sử dụng, có lượt bình chọn khá cao, nên mình cũng xài Vim Plug luôn 🙂 Các lý do nên xài Vim Plug: Rất đơn&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/8/vim-plug.png" alt="" />
                <h2 id="cài-đặt-vim-để-code-giống-ide">Cài đặt Vim để code giống IDE</h2>
<h4 id="vim-plug">Vim-Plug</h4>
<p>Vim có rất nhiều Package Manager như:</p>
<ul>
<li>Vim Plug</li>
<li>Vundle</li>
<li>Pathogen</li>
<li>Dein.vim</li>
<li>Janus</li>
</ul>
<p>Nhưng <strong>Vim Plug</strong> có vẻ được rất nhiều người sử dụng, có lượt bình chọn khá cao, nên mình cũng xài <strong>Vim Plug</strong> luôn 🙂</p>
<p>Các lý do nên xài Vim Plug:</p>
<ul>
<li>Dễ dàng cài đặt, cấu hình và sử dụng</li>
<li>Cài plugin từ bất cứ đâu, có thể từ folder, từ git, từ tên plugin…</li>
<li>Dễ dàng gỡ bỏ plugins mình không cần xài nữa</li>
<li>Cài đặt plugin khá nhanh</li>
<li>Hỗ trợ 3 hệ điều hành thường sử dụng: Linux, MacOS, Windows</li>
</ul>
<h4 id="cài-đặt-vim-plughttpsgithubcomjunegunnvim-plug">Cài đặt <a class="link" href="https://github.com/junegunn/vim-plug" target="_blank" rel="noopener">Vim Plug</a>:</h4>
<p>Rất đơn giản, chỉ 1 dòng lệnh <code>curl</code> là cài xong rồi 🤤</p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-makefile" data-lang="makefile"><span class="err">curl</span> <span class="err">-fLo</span> <span class="err">~/.var/app/io.neovim.nvim/data/nvim/site/autoload/plug.vim</span> <span class="err">\</span>
    <span class="nf">https</span><span class="o">:</span>//<span class="n">raw</span>.<span class="n">githubusercontent</span>.<span class="n">com</span>/<span class="n">junegunn</span>/<span class="n">vim</span>-<span class="n">plug</span>/<span class="n">master</span>/<span class="n">plug</span>.<span class="n">vim</span></code></pre>
</div>
<h4 id="cấu-hình-vim-plug">Cấu hình <code>Vim Plug</code>:</h4>
<ul>
<li>Tạo file <code>.vimrc</code> trong thư mục user của hệ điều hành, thường để trong dấu <code>~</code> như thế này: <code>~/.vimrc</code></li>
<li>Để các plugin cần cài đặt bên trong khối này:</li>
</ul>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-makefile" data-lang="makefile"><span class="err">call</span> <span class="err">plug</span><span class="c">#begin()
</span><span class="err">...</span>
<span class="err">call</span> <span class="err">plug</span><span class="c">#end()</span></code></pre>
</div>
<ul>
<li>
<p>Các plugin cần bắt đầu với từ khóa <code>Plug</code></p>
</li>
<li>
<p>Ví dụ:</p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-makefile" data-lang="makefile"><span class="err">call</span> <span class="err">plug</span><span class="c">#begin('~/.vim/plugged')
</span>
<span class="s2">" Make sure you use single quotes
</span>
<span class="s2">"</span> <span class="nf">Shorthand notation; fetches https</span><span class="o">:</span>//<span class="n">github</span>.<span class="n">com</span>/<span class="n">junegunn</span>/<span class="n">vim</span>-<span class="n">easy</span>-<span class="n">align</span>
<span class="err">Plug</span> <span class="s1">'junegunn/vim-easy-align'</span>

<span class="s2">" Any valid git URL is allowed
</span><span class="s2">Plug 'https://github.com/junegunn/vim-github-dashboard.git'
</span>
<span class="s2">"</span> <span class="err">Multiple</span> <span class="err">Plug</span> <span class="err">commands</span> <span class="err">can</span> <span class="err">be</span> <span class="err">written</span> <span class="err">in</span> <span class="err">a</span> <span class="err">single</span> <span class="err">line</span> <span class="err">using</span> <span class="err">|</span> <span class="err">separators</span>
<span class="err">Plug</span> <span class="s1">'SirVer/ultisnips'</span> <span class="err">|</span> <span class="err">Plug</span> <span class="s1">'honza/vim-snippets'</span>

<span class="s2">" On-demand loading
</span><span class="s2">Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
</span><span class="s2">Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
</span>
<span class="s2">"</span> <span class="err">Using</span> <span class="err">a</span> <span class="err">non-default</span> <span class="err">branch</span>
<span class="nf">Plug 'rdnetto/YCM-Generator', { 'branch'</span><span class="o">:</span> '<span class="n">stable</span>' }

<span class="s2">" Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
</span><span class="s2">Plug 'fatih/vim-go', { 'tag': '*' }
</span>
<span class="s2">"</span> <span class="err">Plugin</span> <span class="err">options</span>
<span class="nf">Plug 'nsf/gocode', { 'tag'</span><span class="o">:</span> '<span class="n">v</span>.20150303'<span class="p">,</span> '<span class="n">rtp</span>': '<span class="n">vim</span>' }

<span class="s2">" Plugin outside ~/.vim/plugged with post-update hook
</span><span class="s2">Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
</span>
<span class="s2">"</span> <span class="err">Unmanaged</span> <span class="err">plugin</span> <span class="err">(manually</span> <span class="err">installed</span> <span class="err">and</span> <span class="err">updated)</span>
<span class="err">Plug</span> <span class="s1">'~/my-prototype-plugin'</span>

<span class="err">"</span> <span class="err">Initialize</span> <span class="err">plugin</span> <span class="err">system</span>
<span class="err">call</span> <span class="err">plug</span><span class="c">#end()</span></code></pre>
</div>
</li>
</ul>
<p>Phần tiếp theo chúng ta sẽ bắt đầu làm đẹp Vim :v</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>[Phần 1] Vim IDE - Vim là cái quái gì?</title>
        <author>
            <name>Lập trình dễ òm</name>
        </author>
        <link href="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/phan-1-vim-ide-vim-la-cai-quai-gi/"/>
        <id>https://www.laptrinhdeom.xyz/laptrinhdeom-2022/phan-1-vim-ide-vim-la-cai-quai-gi/</id>
            <category term="IDE - Vim"/>

        <updated>2022-03-04T18:46:14+07:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/7/cover.png" alt="" />
                    Vim là quái gì vậy? Vim là 1 IDE được rất nhiều người sử dụng trên thế giới, Vim có sẵn trên các nền tảng, rất gọn nhẹ, khó sử dụng, nhưng khi đã xài quen rồi thì nghiện luôn 😍 Vim sau khi cấu&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/7/cover.png" alt="" />
                <h2 id="vim-là-quái-gì-vậy">Vim là quái gì vậy?</h2>
<p>Vim là 1 IDE được rất nhiều người sử dụng trên thế giới, Vim có sẵn trên các nền tảng, rất gọn nhẹ, khó sử dụng, nhưng khi đã xài quen rồi thì nghiện luôn 😍</p>
<p>Vim sau khi cấu hình thì có thể sử dụng như 1 IDE mà các bạn thường sử dụng như VSCode, Sublime Text, Atom…</p>
<h4 id="tại-sao-nên-dùng-vim-để-code">Tại sao nên dùng Vim để code?</h4>
<ul>
<li>[Gọn, nhẹ] Xấu cực đỉnh, chính vì thế nên rất gọn nhẹ, thời gian khởi động của Vim cực kì nhanh.</li>
<li>[Tùy biến] Khả năng tùy biến cực cao, mặc định thì nó khá xấu, nhưng sau khi tùy biến lại thì sẽ rất đẹp.</li>
<li>[Plugins, Extensions] Rất nhiều, hỗ trợ hầu hết các ngôn ngữ về code highlight và autocomplete, dễ dàng cài đặt và cấu hình.</li>
<li>[Cộng đồng] Cộng đồng cực lớn, cần gì thì sẽ tìm được hỗ trợ rất nhiều trên mạng, không phải lo.</li>
<li>[Tốc độ làm việc] Tốc độ làm việc với Vim rất nhanh, tất cả thao tác khi code với Vim đều trên bàn phím, thậm chí không cần đến chuột, nên mọi thứ rất nhanh.</li>
<li>[Tiện dụng] Dễ dàng chuyển đổi giữa các thiết bị máy tính, giữa các hệ điều hành chỉ cần file <code>.vimrc</code> là xong, rất đơn giản, không cần cài lại thủ công từng plugin sau khi qua môi trường mới.</li>
<li>[Cảm giác] Cảm giác code với Vim rất ngầu, pro, đỉnh, nên sẽ dễ gây nghiện 🤤, có hứng thú khi code hơn.</li>
</ul>
<h4 id="nhược-điểm-của-vim">Nhược điểm của Vim</h4>
<ul>
<li>Khó tiếp cận, khó làm quen, đòi hỏi phải có sự kiên nhẫn và quyết tâm cao, nếu không thì rất dễ nản.</li>
<li>Rất nhiều phím tắt cần phải nhớ, phải tập làm quen nhiều lần mới nhớ được.</li>
</ul>
<h4 id="phím-tắt-trong-vim-thường-dùng">Phím tắt trong Vim thường dùng:</h4>
<ul>
<li>Di chuyển:
<ul>
<li>Dùng 4 phím <code>h,j,k,l</code> để di chuyển <code>qua trái, xuống, lên, qua phải</code></li>
<li><code>gg</code> để di chuyển nhanh lên dòng số 1</li>
<li><code>Shift + g</code> để di chuyển xuống dưới cùng của file</li>
<li><code>^</code> đề về đầu dòng</li>
<li><code>$</code> để về cuối</li>
<li><code>w</code> để đi tới 1 từ (word)</li>
<li><code>b</code> để đi lùi 1 từ</li>
</ul>
</li>
<li>Chế độ <code>Insert</code>:
<ul>
<li><code>i</code> để đưa con trỏ về chế độ <code>Insert</code> ngay tại vị trí con trỏ</li>
<li><code>Shift + A</code> để con trỏ về chế độ <code>Insert</code> ở cuối dòng</li>
<li><code>a</code> để đưa con trỏ về chế độ <code>Insert</code> tại ngay sau con trỏ 1 ký tự</li>
</ul>
</li>
<li>Chế độ <code>Delete</code>:
<ul>
<li><code>dw</code> để delete tới 1 từ</li>
<li><code>db</code> để delete lùi 1 từ</li>
<li><code>cw</code> để delete tới 1 từ và đưa con trỏ về chế độ <code>Insert</code></li>
<li><code>cb</code> để delete lùi 1 từ và đưa con trỏ về chế độ <code>Insert</code></li>
<li><code>di"</code> xóa tất cả nội dung trong cặp dấu <code>""</code>, các bạn gõ <code>di</code> và ký tự muốn xóa đến đó nhé: <code>di)</code>, <code>di]</code>
<ul>
<li>Ví dụ <code>"Đây là nội dung"</code> thì khi gõ <code>di"</code> thì chỉ còn lại <code>""</code></li>
<li>Ví dụ 2: <code>function convert(value: string, convertTo: number) {}</code>, khi trỏ tại chỗ <code>value</code> và gõ <code>di)</code> thì còn lại: <code>function convert() {}</code></li>
</ul>
</li>
<li><code>ci"</code> tương tự như <code>di"</code> chỉ khác sau khi xóa thì đưa con trỏ về chế độ <code>Insert</code> luôn nhé.</li>
<li> </li>
</ul>
</li>
</ul>
<h4 id="demo-vim-mình-đang-xài">Demo Vim mình đang xài:<a href="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/7/gallery/vim-demo.png" data-size="3104x1924" style="font-family: var(--font-base); font-size: inherit; font-weight: var(--font-weight-normal);"><img loading="lazy" src="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/7/gallery/vim-demo-thumbnail.png" alt="Demo vim" width="768" height="476"></a></h4>
<p>Phần tiếp theo ta sẽ cùng cài đặt Vim package manager để cài đặt plugin này nọ :)</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Phân biệt Number và parseInt trong javascript</title>
        <author>
            <name>Lập trình dễ òm</name>
        </author>
        <link href="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/phan-biet-number-va-parseint-trong-javascript/"/>
        <id>https://www.laptrinhdeom.xyz/laptrinhdeom-2022/phan-biet-number-va-parseint-trong-javascript/</id>
            <category term="Javascript cơ bản"/>

        <updated>2022-03-04T18:16:53+07:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/6/javascript-number-vs-parseInt.jpeg" alt="" />
                    ✴️ Công dụng của Number và parseInt là gì? Nói về công dụng thì Number và parseInt đều dùng để chuyển đổi 1 kiểu dữ liệu khác sang kiểu số. Nếu convert số nguyên thì cả 2 đều như nhau. Ví dụ: Number("123"); // =&gt; 123 parseInt("123"); // =&gt; 123 ✴️ Giống&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/6/javascript-number-vs-parseInt.jpeg" alt="" />
                <h3 id="công-dụng-của-number-và-parseint-là-gì">✴️ Công dụng của Number và parseInt là gì?</h3>
<ul>
<li>Nói về công dụng thì <code>Number</code> và <code>parseInt</code> đều dùng để <strong>chuyển đổi</strong> 1 kiểu dữ liệu khác <strong><code>sang kiểu số</code></strong>.</li>
<li>Nếu convert số nguyên thì cả 2 đều như nhau.</li>
</ul>
<p>Ví dụ:</p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="nb">Number</span><span class="p">(</span><span class="s2">"123"</span><span class="p">);</span> <span class="c1">// =&gt; 123
</span><span class="nb">parseInt</span><span class="p">(</span><span class="s2">"123"</span><span class="p">);</span> <span class="c1">// =&gt; 123</span></code></pre>
</div>
<h3 id="công-dụng-của-number-và-parseint-là-gì">✴️ Giống nhau</h3>
<h5 id="convert-string-của-số-nguyên">✍ Convert string của số nguyên</h5>
<ul>
<li>
<p>Cả 2 đều có thể convert string là số nguyên sang số nguyên. Ví dụ:</p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="nb">Number</span><span class="p">(</span><span class="s2">"12345"</span><span class="p">);</span> <span class="c1">// =&gt; 123.25
</span><span class="nb">parseInt</span><span class="p">(</span><span class="s2">"12345"</span><span class="p">);</span> <span class="c1">// =&gt; 123
</span></code></pre>
</div>
</li>
</ul>
<h5 id="convert-string-của-số-nguyên">✍ Tự trim khoảng trắng</h5>
<ul>
<li>Cả 2 đều tự trim khoảng trắng trước và sau để convert sang số Ví dụ:
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="nb">Number</span><span class="p">(</span><span class="s2">"   123   "</span><span class="p">);</span> <span class="c1">// =&gt; 123
</span><span class="nb">parseInt</span><span class="p">(</span><span class="s2">"   123   "</span><span class="p">);</span> <span class="c1">// =&gt; 123</span></code></pre>
</div>
</li>
</ul>
<h3 id="công-dụng-của-number-và-parseint-là-gì">✴️ Khác nhau</h3>
<h5 id="convert-string-của-số-nguyên">✍ Chuyển đổi (Convert) số thực</h5>
<p>Ví dụ:</p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="nb">Number</span><span class="p">(</span><span class="s2">"123.25"</span><span class="p">);</span> <span class="c1">// =&gt; 123.25
</span><span class="nb">parseInt</span><span class="p">(</span><span class="s2">"123.35"</span><span class="p">);</span> <span class="c1">// =&gt; 123</span></code></pre>
</div>
<p>Như bạnd đã thấy, kết quả của 2 dòng trên sẽ khác nhau:</p>
<ul>
<li><code>Number</code> có thể convert string của số thực thành <code>số thực</code>.</li>
<li><code>parseInt</code> convert số thực thành <code>số nguyên</code>.</li>
</ul>
<h5 id="convert-string-của-số-nguyên">✍ Chuyển đổi Boolean</h5>
<p>Ví dụ:</p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="nb">Number</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span> <span class="c1">// =&gt; 1
</span><span class="nb">Number</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span> <span class="c1">// =&gt; 0
</span>
<span class="nb">parseInt</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span> <span class="c1">// =&gt; NaN
</span><span class="nb">parseInt</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span> <span class="c1">// =&gt; NaN</span></code></pre>
</div>
<ul>
<li><code>Number</code> convert boolean thành <code>số 0 hoặc 1</code>.</li>
<li><code>parseInt</code> không thể convert boolean, nên nó trả về giá trị <code>NaN</code>.</li>
</ul>
<h5 id="convert-string-của-số-nguyên">✍ Chuyển đổi String (gồm số và ký tự)</h5>
<p>Ví dụ:</p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="nb">Number</span><span class="p">(</span><span class="s2">"abc123"</span><span class="p">);</span> <span class="c1">// =&gt; NaN
</span><span class="nb">parseInt</span><span class="p">(</span><span class="s2">"abc123"</span><span class="p">);</span> <span class="c1">// =&gt; NaN
</span>
<span class="nb">Number</span><span class="p">(</span><span class="s2">"123abc"</span><span class="p">);</span> <span class="c1">// =&gt; NaN
</span><span class="nb">parseInt</span><span class="p">(</span><span class="s2">"123abc"</span><span class="p">);</span> <span class="c1">// =&gt; 123
</span></code></pre>
</div>
<ul>
<li><code>Number</code> không thể convert chuỗi <code>123abc</code> hay <code>abc123</code> thành số được, nó luôn trả về giá trị <code>NaN</code>.</li>
<li><code>parseInt</code> không thể convert chuỗi <code>abc123</code>, nhưng lại có thể convert chuỗi <code>123abc</code>, nghĩa là parseInt sẽ lấy các ký tự là số ở đầu để convert sang số.</li>
</ul>
<h3 id="công-dụng-của-number-và-parseint-là-gì">✴️ Kết</h3>
<p>Hy vọng thông qua các ví dụ trên, các bạn có thể hình dung được sự khác nhau của <code>Number</code> và <code>parseInt</code> rồi nhé, để biết được khi nào nên sử dụng cái nào cho phù hợp.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>&#x27;this&#x27; keyword trong Javascript</title>
        <author>
            <name>Lập trình dễ òm</name>
        </author>
        <link href="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/this-keyword-trong-javascript/"/>
        <id>https://www.laptrinhdeom.xyz/laptrinhdeom-2022/this-keyword-trong-javascript/</id>
            <category term="Javascript cơ bản"/>

        <updated>2022-03-02T23:05:35+07:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/5/javascript-this-keyword.jpeg" alt="" />
                    🤯 ‘this’ keyword trong Javascript this trong Javascript liên quan đến đối tượng mà nó thuộc về. Hơi trừu tượng phải không, đừng lo, mình sẽ giải thích rõ hơn ở bên dưới nha. this có giá trị khác nhau khi nó được sử dụng ở các ngữ cảnh khác nhau. const&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/5/javascript-this-keyword.jpeg" alt="" />
                <h3 id="this-keyword-trong-javascript">🤯 ‘this’ keyword trong Javascript</h3>
<p><strong><code>this</code></strong> trong Javascript liên quan đến đối tượng mà nó thuộc về.</p>
<p>Hơi trừu tượng phải không, đừng lo, mình sẽ giải thích rõ hơn ở bên dưới nha.</p>
<h3 id="tóm-lượt-về-this">ℹ️ Tóm lượt về this</h3>
<p><strong><code>this</code></strong> có <strong>giá trị khác nhau</strong> khi nó được <strong>sử dụng</strong> ở các <strong>ngữ cảnh khác nhau</strong>.</p>
<ul>
<li>Khi ở <code>global scope</code>, <strong>this</strong> sẽ có giá trị là <strong>global object</strong>, trong trình duyệt global object chính là <strong>window</strong>.</li>
<li>Trong <code>function</code>:
<ul>
<li>this (trong normal mode) sẽ có giá trị là <strong>global object</strong>.</li>
<li>this (trong strict mode) sẽ có giá trị là <strong>undefined</strong>.</li>
</ul>
</li>
<li>Trong phương thức <code>object</code>, this sẽ có giá trị là chính <strong>object</strong> đó. Ví dụ:
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">person</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">firstName</span><span class="o">:</span> <span class="s2">"Lập trình"</span><span class="p">,</span>
  <span class="nx">lastName</span><span class="o">:</span> <span class="s2">"Dễ òm"</span><span class="p">,</span>
  <span class="nx">id</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="nx">fullName</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s2">" "</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span> <br><span class="c1">    // this là object `person`
</span>  <span class="p">},</span>
<span class="p">};</span></code></pre>
</div>
</li>
<li>Trong các <code>sự kiện</code>, như <code>onClick</code> của <strong>button</strong>, <code>onChange</code> của <strong>input</strong>…, thì this sẽ có giá trị chính <code>element</code> (button/input) đó. Ví dụ:
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onclick</span><span class="o">=</span><span class="s2">"this.style.display='none'"</span><span class="o">&gt;</span><span class="nx">Học</span> <span class="nx">lập</span> <span class="nx">trình</span> <span class="nx">web</span><span class="o">&lt;</span><span class="err">/button&gt;</span></code></pre>
</div>
</li>
<li>Trong <code>call</code>, <code>apply</code>, thì this có giá trị là bất cứ đối tượng nào được đưa vào trong 2 functions này. Ví dụ:
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">person1</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">fullName</span><span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">firstName</span> <span class="o">+</span> <span class="s2">" "</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">lastName</span><span class="p">;</span>
  <span class="p">},</span>
<span class="p">};</span>
<span class="kr">const</span> <span class="nx">person2</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">firstName</span><span class="o">:</span> <span class="s2">"Lập trình"</span><span class="p">,</span>
  <span class="nx">lastName</span><span class="o">:</span> <span class="s2">"Dễ òm"</span><span class="p">,</span>
<span class="p">};</span>
<span class="nx">person1</span><span class="p">.</span><span class="nx">fullName</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">person2</span><span class="p">);</span> <br><span class="c1">// this của phương thức fullName trong person1 sẽ là person2</span></code></pre>
</div>
</li>
</ul>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Strict mode trong Javascript là gì?</title>
        <author>
            <name>Lập trình dễ òm</name>
        </author>
        <link href="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/strict-mode-trong-javascript-la-gi/"/>
        <id>https://www.laptrinhdeom.xyz/laptrinhdeom-2022/strict-mode-trong-javascript-la-gi/</id>
            <category term="Javascript cơ bản"/>

        <updated>2022-03-02T23:01:08+07:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/4/javascript-use-strict.jpeg" alt="" />
                    ❓Use strict là gì? Nó dùng để làm gì? Use strict là khái niệm mới từ khi ES5 được phát hành, nó là 1 chuỗi bình thường, và được trình duyệt có version Javascript ES5 trở lên hiểu được, còn trình duyệt hỗ trợ Javascript version&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/4/javascript-use-strict.jpeg" alt="" />
                <h3 id="use-strict-là-gì-nó-dùng-để-làm-gì">❓Use strict là gì? Nó dùng để làm gì?</h3>
<ul>
<li>
<p><strong>Use strict</strong> là khái niệm mới từ khi ES5 được phát hành, nó là 1 chuỗi bình thường, và được trình duyệt có version Javascript ES5 trở lên hiểu được, còn trình duyệt hỗ trợ Javascript version thấp hơn sẽ có vấn đề gì cả.</p>
</li>
<li>
<p>Bởi vì Javascript là ngôn ngữ lập trình khá dễ dãi, khai báo và dùng biến kiểu gì cũng được, hay nói 1 cách khác là vô tội vạ, khiến cho nhiều bugs phát sinh và khó kiểm soát việc khai báo và sử dụng biến.</p>
</li>
<li>
<p><strong>use strict</strong> được sinh ra để báo với Javascript rằng nó phải tuân theo <strong>strict mode</strong>. Với chế độ này thì bạn không thể sử dụng biến trước khi khai báo (nếu không có use strict thì bạn sẽ có thể sử dụng biến trước khi khai báo chúng).</p>
</li>
</ul>
<h3 id="cách-khai-báo">👉 Cách khai báo</h3>
<p><code>"use strict;";</code></p>
<p>Đơn giản vậy thôi, bạn để dòng trên ở trên cùng của file javascript của bạn là được nhé, tất cả code javascript của bạn ở phía dưới sẽ là <strong>strict mode</strong>.</p>
<p><strong>Ví dụ:</strong></p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="s2">"use strict;"</span><span class="p">;</span>
<span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào"</span><span class="p">;</span> <br><span class="c1">// Lỗi, vì bạn chưa khai báo biến hello mà đã gán giá trị cho nó.
</span>
<span class="c1">// ------------------------
</span>
<span class="nx">sayHello</span><span class="p">();</span>
<span class="kd">function</span> <span class="nx">sayHello</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào bạn"</span><span class="p">;</span> <br><span class="c1">  // vẫn lỗi, vì bạn chưa khai báo biến hello mà đã gán giá trị cho nó.
</span><span class="p">}</span></code></pre>
<p><strong>Ví dụ 2:</strong></p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào bạn"</span><span class="p">;</span> <span class="c1">// Không bị lỗi nhé
</span>
<span class="nx">sayHello</span><span class="p">();</span>
<span class="kd">function</span> <span class="nx">sayHello</span><span class="p">()</span> <span class="p">{</span>
  <span class="s2">"use strict;"</span><span class="p">;</span>
  <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào bạn"</span><span class="p">;</span> <br><span class="c1">  // lỗi, vì use strict được đặt trong function này.
</span><span class="p">}</span></code></pre>
</div>
<h3 id="tại-sao-lại-phải-dùng-strict-mode">📄 Tại sao lại phải dùng strict mode?</h3>
<p>Có vài lý do sau đây mà chúng ta nên sử dụng strict mode khi code:</p>
<ul>
<li>Tránh việc lập trình viên vô tình tạo ra 1 biến global scope mà họ không hề biết.
<ul>
<li>Vì trong chế độ bình thường, thì lập trình viên quên mất, nên tạo ra 1 biến global scope bằng cách không để var/let/const cho nó.</li>
<li>Sau đó có logic phía dưới lại update giá trị cho biến global này, dẫn đến việc có thể vô tình tạo ra bug nào đó, khiến chúng ta mất khá nhiều thời gian để debug để tìm ra vấn đề.</li>
</ul>
</li>
<li>Tạo cho chúng ta thói quen lập trình tốt hơn, tư duy cấu trúc và logic khi lập trình, phải khai báo biến trước khi sử dụng.</li>
<li>Strict mode giúp chúng ta tránh việc code logic vô tội vạ, như: gán giá trị cho biến không được gán, sử dụng biến hoặc object hoặc thuộc tính không tồn tại…</li>
</ul>
<h3 id="các-trường-hợp-javascript-báo-lỗi-khi-sử-dụng-use-strict">💯 Các trường hợp Javascript báo lỗi khi sử dụng use strict:</h3>
<ul>
<li>
<p>Sử dụng biến chưa được khai báo</p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="s2">"use strict;"</span><span class="p">;</span>
<span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào"</span><span class="p">;</span> <br><span class="c1">// Lỗi, vì bạn chưa khai báo biến hello mà đã gán giá trị cho nó.</span></code></pre>
</div>
</li>
<li>
<p>Delete 1 biến hoặc 1 object hoặc 1 function</p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="s2">"use strict"</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào"</span><span class="p">;</span>
<span class="k">delete</span> <span class="nx">hello</span><span class="p">;</span> <span class="c1">// Lỗi
</span>
<span class="kd">function</span> <span class="nx">sayHello</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"Xin chào"</span><span class="p">);</span>
<span class="p">};</span>
<span class="k">delete</span> <span class="nx">sayHello</span><span class="p">;</span> <span class="c1">// Lỗi</span></code></pre>
</div>
</li>
<li>
<p>Sử dụng các keyword làm tên biến:</p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="s2">"use strict"</span><span class="p">;</span>
<span class="kd">var</span> <span class="nb">eval</span> <span class="o">=</span> <span class="s2">"Xin chào"</span><span class="p">;</span> <span class="c1">// Lỗi
</span><span class="kd">let</span> <span class="nx">arguments</span> <span class="o">=</span> <span class="s2">"Xin chào"</span><span class="p">;</span> <span class="c1">// Lỗi</span></code></pre>
</div>
<p>Các tự khóa (keyword) không thể sử dụng làm tên biến:</p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="kr">implements</span>
<span class="kr">interface</span>
<span class="kd">let</span>
<span class="kr">package</span>
<span class="kr">private</span>
<span class="kr">protected</span>
<span class="kr">public</span>
<span class="kr">static</span>
<span class="k">yield</span>
<span class="nb">eval</span>
<span class="nx">arguments</span>
<span class="p">...</span></code></pre>
</div>
</li>
</ul>
</div>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Sự khác nhau giữa Var, Let và Const trong Javascript</title>
        <author>
            <name>Lập trình dễ òm</name>
        </author>
        <link href="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/su-khac-nhau-giua-var-let-va-const-trong-javascript/"/>
        <id>https://www.laptrinhdeom.xyz/laptrinhdeom-2022/su-khac-nhau-giua-var-let-va-const-trong-javascript/</id>
            <category term="Javascript cơ bản"/>

        <updated>2022-03-01T23:29:19+07:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/3/javascript-var-let-const.webp" alt="" />
                    var, let và const trong Javascript Cách khai báo, khởi tạo biến trong Javascript Khi lập trình chúng ta thường phải sử dụng các biến để lưu trữ giá trị, dữ liệu… Trong Javascript thì để khởi tạo, khai báo biến, chúng ta sẽ dùng var hoặc let hoặc const.
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/3/javascript-var-let-const.webp" alt="" />
                <h1 id="var-let-và-const-trong-javascript">var, let và const trong Javascript</h1>
<h2 id="cách-khai-báo-khởi-tạo-biến-trong-javascript">Cách khai báo, khởi tạo biến trong Javascript</h2>
<p>Khi lập trình chúng ta thường phải sử dụng các biến để lưu trữ giá trị, dữ liệu…</p>
<p>Trong Javascript thì để khởi tạo, khai báo biến, chúng ta sẽ dùng <strong>var</strong> hoặc <strong>let</strong> hoặc <strong>const</strong>.</p>
<p><strong>Ví dụ:</strong></p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào"</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="s2">"Lập trình Dễ òm"</span><span class="p">;</span>
<span class="kr">const</span> <span class="nx">helloMessage</span> <span class="o">=</span> <span class="nx">hello</span> <span class="o">+</span> <span class="s2">" "</span> <span class="o">+</span> <span class="nx">name</span><span class="p">;</span>
<span class="c1">// Kết quả: 'Xin chào Lập trình Dễ òm'</span></code></pre>
</div>
<p>Khá dễ hiểu phải không, vậy sự khác nhau giữa chúng là gì và khi nào nên dùng <strong>var</strong>, <strong>let</strong> và <strong>const</strong>?</p>
<p><strong>let</strong> và <strong>const</strong> là 2 từ khóa mới được giới thiệu trong <code>ES6</code> vào năm 2015, trước đó thì khởi tạo biến chỉ có 1 cách duy nhất là sử dụng từ khóa <strong>var</strong>.</p>
<h2 id="var">👉 var</h2>
<h4 id="scope-của-var">Scope của var</h4>
<ul>
<li><strong>var</strong> có scope là <strong>global scope</strong> hoặc <strong>function scope</strong>.</li>
<li>Nếu khởi tạo biến với var ở <strong>ngoài</strong> function thì nó có scope là <strong>global scope</strong>.</li>
<li>Nếu khởi tạo biến với var ở <strong>trong</strong> function thì nó có scope là <strong>function scope</strong>.</li>
</ul>
<h4 id="khai-báo-lại-redeclared-và-thay-đổi-giá-trị">Khai báo lại (redeclared) và thay đổi giá trị</h4>
<ul>
<li>
<p><strong>var</strong> cho phép chúng ta <strong>khai báo lại</strong>(redeclared) biến với cùng tên, nhưng cùng hoặc khác giá trị mà không bị lỗi gì.</p>
<p><strong>Ví dụ:</strong></p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào"</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào bạn"</span><span class="p">;</span>
</code></pre>
<button class="copyCodeButton">Copy</button></div>
</li>
<li>
<p>var cũng cho phép chúng ta thay đổi giá trị bất cứ khi nào cần.</p>
<p><strong>Ví dụ:</strong></p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào"</span><span class="p">;</span>
<span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào bạn"</span><span class="p">;</span>
</code></pre>
<button class="copyCodeButton">Copy</button></div>
</li>
</ul>
<h4 id="hoisting-của-var">Hoisting của var?</h4>
<p><strong>Hoisting là gì?</strong> bạn hãy đọc thêm ở đây: <a class="link" href="https://www.laptrinhdeom.xyz/bai-viet/javascript/hoisting-trong-javascript-la-gi/">Hoisting trong Javascript</a></p>
<p><strong>Hoisting</strong> là cơ chế của Javascript sẽ chuyển các phần khai báo của biến và hàm lên top của phạm vi của biến và hàm đó.</p>
<p>Với <strong>var</strong> thì biến sẽ được hoisted với giá trị <strong>undefined</strong>.</p>
<h4 id="lưu-ý-với-var">Lưu ý với var</h4>
<p>Khi làm việc với <strong>var</strong>, bạn phải chú ý thật kỹ các lưu ý sau đây.</p>
<ul>
<li><strong>var</strong> không báo lỗi khi khai báo lại biến với cùng tên, nên rất khó phát hiện lỗi, có thể vô tình ghi đè giá trị của 1 biến nào đó phía trên mà chúng ta không biết. Điều này làm chúng ta mất nhiều khá thời gian để debug lỗi.</li>
<li>Gán giá trị cho biến <strong>var</strong> ở <strong>global scope</strong> thì biến đó sẽ trở thành <strong>thuộc tính</strong> của object <strong>window</strong>.</li>
</ul>
<hr>
<h2 id="var">👉 let</h2>
<h4 id="scope-của-let">Scope của let</h4>
<ul>
<li><strong>let</strong> là <strong>block scope</strong>.</li>
<li><strong>block</strong> nghĩa là code được viết trong cặp dấu <code>{}</code>, ví dụ function, if/else, switch - case, for/while… Nghĩa là biến được khởi tạo với <strong>let</strong> trong block thì sẽ không thể sử dụng ở ngoài block đó, <strong>var</strong> thì có thể được nhé.</li>
</ul>
<p><strong>Ví dụ:</strong></p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="p">{</span>
  <span class="kd">let</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào"</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// Biến hello sẽ KHÔNG thể được sử dụng ở đây</span></code></pre>
</div>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="p">{</span>
  <span class="kd">var</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào"</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// Biến hello sẽ CÓ thể được sử dụng ở đây</span></code></pre>
</div>
<h4 id="khai-báo-lạiredeclared-và-thay-đổi-giá-trị">Khai báo lại(redeclared) và thay đổi giá trị</h4>
<ul>
<li>
<p><strong>let</strong> KHÔNG cho phép khai báo lại(redeclared) biến với cùng tên với phía trên.</p>
</li>
<li>
<p>Khi bạn cố tình redeclared biến thì sẽ nhận được lỗi này: <code>error: Identifier 'variableName' has already been declared</code> <strong>Ví dụ:</strong></p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào"</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào bạn"</span><span class="p">;</span>
<span class="c1">// Kết quả: error: Identifier 'hello' has already been declared</span></code></pre>
</div>
</li>
<li>
<p>Redeclared biến khác scope thì KHÔNG bị lỗi nhé. <strong>Ví dụ:</strong></p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào"</span><span class="p">;</span>

<span class="k">if</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào bạn"</span><span class="p">;</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hello</span><span class="p">);</span> <span class="c1">// "Xin chào bạn"
</span><span class="p">}</span>

<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hello</span><span class="p">);</span> <span class="c1">// "Xin chào"</span></code></pre>
</div>
</li>
<li>
<p><strong>let</strong> cũng giống <strong>var</strong>, let CHO phép chúng ta thay đổi giá trị bất cứ lúc nào. <strong>Ví dụ:</strong></p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="kd">let</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào"</span><span class="p">;</span>
<span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào bạn"</span><span class="p">;</span></code></pre>
</div>
</li>
</ul>
<h4 id="hoisting-của-let">Hoisting của let?</h4>
<ul>
<li>Cũng giống như <strong>var</strong>, <strong>let</strong> cũng được <strong>hoisted</strong> lên top của scope, <strong>NHƯNG</strong> không khởi tạo giá trị <strong>undefined</strong> như <strong>var</strong>.</li>
<li>Nghĩa là bạn sẽ bị báo lỗi <code>Reference Error</code> khi sử dụng biến với let mà chưa khai báo ở phía trên.</li>
</ul>
<hr>
<h2 id="var">👉 const</h2>
<h4 id="scope-của-const">Scope của const</h4>
<p>Tương tự như <strong>let</strong>, <strong>const</strong> cũng có scope là <strong>block</strong>.</p>
<h4 id="khai-báo-lại-và-thay-đổi-giá-trị">Khai báo lại và thay đổi giá trị</h4>
<ul>
<li>
<p>const chỉ được khai báo và gán giá trị 1 lần duy nhất, giá trị của const là không thể thay đổi, nếu cố tình gán giá trị cho const, bạn sẽ nhận lỗi này: <code>error: Assignment to constant variable.</code></p>
</li>
<li>
<p>const cũng không cho phép redeclared biến, bạn sẽ nhận được lỗi này khi cố gắng redeclare: <code>error: Identifier 'variableName' has already been declared</code>.</p>
</li>
</ul>
<h4 id="hoisting-của-const">Hoisting của const?</h4>
<p><strong>const hoisting</strong> giống y chang <strong>let</strong>, nghĩa là bạn sẽ bị lỗi khi sử dụng biến trước khi khai báo nó.</p>
<h4 id="lưu-ý-với-const">Lưu ý với const</h4>
<ul>
<li>
<p>Giá trị của biến với const không thể thay đổi, nhưng bạn có thể thay đổi thuộc tính (properties) của object <strong>Ví dụ:</strong></p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">employee</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">firstName</span><span class="o">:</span> <span class="s2">"Lập trình"</span><span class="p">,</span>
  <span class="nx">lastName</span><span class="o">:</span> <span class="s2">"Dễ òm"</span><span class="p">,</span>
<span class="p">};</span>

<span class="nx">employee</span><span class="p">.</span><span class="nx">lastName</span> <span class="o">=</span> <span class="s2">"Dễ òm phải không bạn"</span><span class="p">;</span> <span class="c1">// hợp lệ</span></code></pre>
</div>
</li>
<li>
<p>Có thể thêm/xóa/sửa các phần tử của 1 array với const <strong>Ví dụ:</strong></p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="kr">const</span> <span class="nx">employees</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">];</span>

<span class="nx">employees</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> <span class="c1">// [1,2,3,4,5]</span></code></pre>
</div>
</li>
</ul>
<hr>
<h2 id="var">👉 Tóm lượt sự khác nhau của var, let và const</h2>
<ul>
<li><strong>var</strong> là <strong>global scope</strong> hoặc <strong>function scope</strong>, <strong>let</strong> và <strong>const</strong> là <strong>block scope</strong>.</li>
<li><strong>var</strong> <code>có thể</code> redeclared biến và gán lại giá trị, <strong>let</strong> <code>không thể</code> redeclared biến nhưng <code>có thể</code> gán lại giá trị, trong khi <strong>const</strong> thì <code>không thể</code> redeclared biến và cũng <code>không thể</code> gán lại giá trị.</li>
<li>Cả 3 đều được <strong>hoisted</strong> lên top của scope. Nhưng <strong>var</strong> thì hoisted với giá trị <strong>undefined</strong>, trong khi đó <strong>let</strong> và <strong>const</strong> thì hoisted nhưng <strong>không có giá trị</strong>.</li>
<li><strong>var</strong> và <strong>let</strong> có thể khởi tạo và không cần gán giá trị ban đầu, sau đó có thể gán giá trị khác, nhưng <strong>const</strong> thì bắt buộc phải gán giá trị ban đầu, và <strong>const</strong> không thể gán lại giá trị.</li>
</ul>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Hoisting trong Javascript là gì?</title>
        <author>
            <name>Lập trình dễ òm</name>
        </author>
        <link href="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/hoisting-trong-javascript-la-gi/"/>
        <id>https://www.laptrinhdeom.xyz/laptrinhdeom-2022/hoisting-trong-javascript-la-gi/</id>
            <category term="Javascript cơ bản"/>

        <updated>2022-03-01T23:24:29+07:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/2/javascript-hoisting.webp" alt="" />
                    Hoisting trong Javascript là gì? Từ xưa giờ khi làm việc với javascript, thì chắc hẳn các bạn cũng nghe tới thuật ngữ Hoisting rồi đúng không. Vậy Hoisting là cái quái gì vậy? nó có ăn được không? nó giúp ích gì cho chúng ta? Mình sẽ giúp&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/2/javascript-hoisting.webp" alt="" />
                <h1 id="hoisting-trong-javascript-là-gì">Hoisting trong Javascript là gì?</h1>
<p>Từ xưa giờ khi làm việc với javascript, thì chắc hẳn các bạn cũng nghe tới thuật ngữ <code>Hoisting</code> rồi đúng không.</p>
<p>Vậy <code>Hoisting</code> là cái quái gì vậy? nó có ăn được không? nó giúp ích gì cho chúng ta?</p>
<p>Mình sẽ giúp các bạn hiểu rõ về nó để chúng ta có đủ kiến thức và sự tự tin khi làm việc với javascript hơn nhé :)</p>
<hr>
<h2 id="định-nghĩa">Định nghĩa:</h2>
<p>Hoisting nghe cao sang vậy thôi, chứ thật ra không có gì là cao siêu đâu nhé.</p>
<p><code>Hoisting</code> là cơ chế của Javascript sẽ chuyển các phần khai báo của biến và hàm lên top của phạm vi của biến và hàm đó.</p>
<p>Nói 1 cách khác là 1 biến có thể được sử dụng trước khi nó được khởi tạo.</p>
<h5 id="ví-dụ-1---variable">📝 Ví dụ 1 - variable:</h5>
<p>Định nghĩa chỉ có vậy, nó hơi khó hiểu, để mình thêm ví dụ để các bạn dễ hiểu hơn:</p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hello</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào"</span><span class="p">;</span></code></pre>
</div>
<p>Code trên được Javascript biên dịch như sau:</p>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">hello</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hello</span><span class="p">);</span>
<span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào"</span><span class="p">;</span></code></pre>
</div>
<p>Cho nên kết quả của ví dụ trên là: <code>undefined</code>.</p>
<p>Các bạn có hình dung ra được không, Javascript sẽ tự động chuyển phần khai báo của biến <code>hello</code> lên đầu tiên của đoạn code, khởi tạo biến xong rồi mới thực hiện các logic khác bên dưới.</p>
<h5 id="ví-dụ-1---variable">📝 Ví dụ 2 - function:</h5>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="nx">sayHello</span><span class="p">();</span>

<span class="kd">function</span> <span class="nx">sayHello</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">"Xin chào"</span><span class="p">);</span>
<span class="p">}</span></code></pre>
</div>
<p>Tương tự như biến, function cũng được Javascript hoisted lên trên cùng của phạm vi.</p>
<p>Kết quả: <code>Xin chào</code>.</p>
<p>Điều đó có nghĩa là bạn hoàn toàn có thể gọi 1 function ở dưới (trước khi viết hàm) để sử dụng mà không gặp lỗi.</p>
<p>Nó sẽ tiện lợi cho chúng ta khi cấu trúc code để dễ làm việc hơn, ví dụ xử lý logic ở trên, phía dưới sẽ là nơi chứa các hàm và biến.</p>
<h5 id="ví-dụ-1---variable">📝 Ví dụ 3:</h5>
<div class="highlight">
<pre class="chroma" tabindex="0"><code class="language-javascript" data-lang="javascript"><span class="nx">sayHello</span><span class="p">();</span>

<span class="kd">function</span> <span class="nx">sayHello</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">hello</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s2">"Xin chào"</span><span class="p">;</span>
<span class="p">}</span></code></pre>
</div>
<p>Kết quả: <code>undefined</code>.</p>
<hr>
<h4 id="lưu-ý">⚠️ Lưu ý:</h4>
<ul>
<li>Javascript chỉ hoist phần <strong>khai báo</strong> <code>biến</code> và <code>hàm</code> lên top của phạm vi (scoped), các phần logic khác như gán giá trị thì không được hoist.</li>
</ul>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Scope của biến trong javascript</title>
        <author>
            <name>Lập trình dễ òm</name>
        </author>
        <link href="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/scope-cua-bien-trong-javascript/"/>
        <id>https://www.laptrinhdeom.xyz/laptrinhdeom-2022/scope-cua-bien-trong-javascript/</id>
            <category term="Javascript cơ bản"/>

        <updated>2022-03-01T23:22:07+07:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/1/javascript-scope.jpeg" alt="" />
                    Scope (phạm vi) của biến trong Javascript như thế nào? Biến trong javascript luôn có phạm vi của nó, trong bài này mình sẽ giúp các bạn hiểu rõ về phạm vi (scope) của biến nhé. Về cơ bản, Javascript có 3 loại scope như sau: Trước khi&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <img src="https://www.laptrinhdeom.xyz/laptrinhdeom-2022/media/posts/1/javascript-scope.jpeg" alt="" />
                <h1 id="scope-phạm-vi-của-biến-trong-javascript-như-thế-nào">Scope (phạm vi) của biến trong Javascript như thế nào?</h1>
<p>Biến trong javascript luôn có phạm vi của nó, trong bài này mình sẽ giúp các bạn hiểu rõ về phạm vi (scope) của biến nhé.</p>
<p>Về cơ bản, Javascript có 3 loại scope như sau:</p>
<ul>
<li>Block scope</li>
<li>Function scope</li>
<li>Global scope</li>
</ul>
<h2 id="chúng-ta-sẽ-đi-chi-tiết-về-từng-loại-scope-trên">Chúng ta sẽ đi chi tiết về từng loại scope trên.</h2>
<h2 id="block-scope">1. Block scope</h2>
<p>Trước khi ES6 ra đời, thì biến được định nghĩa với từ khóa var chỉ có 2 scopes là: Global scope và Function scope.</p>
<ul>
<li>
<p>ES6 đã giới thiệu 2 từ khóa mới là let và const, là Block scope.</p>
</li>
<li>
<p>Biến được khởi tạo với let và const trong cặp dấu {} sẽ không thể truy cập từ bên ngoài block này.</p>
</li>
</ul>
<p>Ví dụ:</p>
<pre><code class="language-javascript">{
  let hello = "Xin chào";
}
// Biến hello sẽ KHÔNG thể được sử dụng ở đây</code></pre>
<ul>
<li>Biến được khởi tạo với var thì không có Block scope</li>
</ul>
<p>Ví dụ:</p>
<div>
<pre><code class="language-javascript">{
  var hello = "Xin chào";
}
// Biến hello sẽ CÓ thể được sử dụng ở đây
</code></pre>
</div>
<hr>
<h2 id="function-scope">2. Function scope</h2>
<ul>
<li>Biến được khởi tạo ở trong function thì được gọi là Function scope, và KHÔNG thể sử dụng ở ngoài function.</li>
<li>Cả 3 var, let, const đều giống nhau về Function scope.</li>
<li>Các function khác nhau CÓ THỂ sử dụng chung tên biến.</li>
</ul>
<p>Ví dụ:</p>
<div>
<pre><code class="language-javascript">function sayHello() {
  var helloVar = "Xin chào Var";
  let helloLet = "Xin chào Let";
  const helloConst = "Xin chào Const";
}
</code></pre>
</div>
<hr>
<h2 id="global-scope">3. Global scope</h2>
<ul>
<li>Biến được khởi tạo bên ngoài function thì được gọi là Global scope.</li>
<li>Cả 3 var, let, const đều có thể là GLOBAL scope.</li>
<li>Biến Global thì có thể sử dụng được trong tất cả function/block.</li>
</ul>
<p>Ví dụ:</p>
<div>
<pre><code class="language-javascript">var helloVar = "Xin chào Var";
let helloLet = "Xin chào Let";
const helloConst = "Xin chào Const";

function sayHello() {
  console.log(helloVar);
  console.log(helloLet);
  console.log(helloConst);
}</code></pre>
</div>
<hr>
<h4 id="lưu-ý">🔅Lưu ý</h4>
<ul>
<li>Gán giá trị cho biến mà biến đó không được khởi tạo, thì biến sẽ tự động trở thành GLOBAL scope. Ví dụ:</li>
</ul>
<div>
<pre><code class="language-javascript">function sayHello() {
  hello = "Xin chào";
}</code></pre>
</div>
<ul>
<li>Biến được khởi tạo ở Global scope với var thì sẽ trở thành thuộc tính của window. Ví dụ:</li>
</ul>
<div>
<pre><code class="language-javascript">var hello = "Xin chào";
console.log(window.hello); // Xin chào</code></pre>
</div>
<h4 id="quan-trọng">❗Quan trọng</h4>
<p>Các bạn hãy nhớ các điều sau để không gặp phải tình trạng rối tung khi code và debug nhé, để tránh việc làm các bạn stress :)</p>
<ul>
<li>Đừng tạo biến GLOBAL bất chấp, bạn phải biết bạn đang tạo với mục đích gì.</li>
<li>Luôn ý thức được phạm vi của biến bạn đang khởi tạo sẽ ảnh hưởng như thế nào đến code của bạn.</li>
<li>code trong function/block của bạn có thể thay đổi giá trị của biến GLOBAL mà bạn không hề biết, hãy chắc chắn những gì bạn đang làm không ảnh hưởng đến toàn bộ website.</li>
</ul>
            ]]>
        </content>
    </entry>
</feed>
